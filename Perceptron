#Example

import numpy as np

class Perceptron:
    """A single neuron with the sigmoid activation funciton.

    Attributes:
        inputs: the number of inputs in the perceptron (not counting the bias)
        bias: The bias term. By default it is 1.0.
    """
    def __init__(self, inputs, bias = 1.0):
        """Return a new Perceptron object with the specified number of inputs 
        (+1 for ???)"""
        #initialize number data which are weights and bias term for this example
        self.weights = (np.random.rand(inputs+1)*2)-1
        self.bias = bias

    def run(self, x):
        """Run the perceptron. x is a python list with the input values.
        feeds an input array X into the perceptron to return the activation functions output
        """
        #weighed sum
        x_sum = np.dot(np.append(x,self.bias),self.weights)
        #plug sum into the activation function and return that
        return self.sigmoid(x_sum)

    def set_weights(self, w_init):
        """ w.init is python list with weights """
        self.weights = np.array(w_init)

    def sigmoid(self, x):
        """ Evaluate sigmoid function for the floating point input x """
        return 1/(1+np.exp(-x))

#test code
neuron = Perceptron(inputs=2)
neuron.set_weights([10,10,-15]) #AND [10 for inputs and -15 for bias]

print("AND Gate:")
print("0 0 = {0:.10f}".format(neuron.run([0,0])))
print("0 1 = {0:.10f}".format(neuron.run([0,1])))
print("1 0 = {0:.10f}".format(neuron.run([1,0])))
print("1 1 = {0:.10f}".format(neuron.run([1,1])))

#Test code for an OR Gate
neuron.set_weights([15, 15, -10]) #OR input value of one will make weighted sum positive
print("OR Gate:")
print("0 0 = {0:.10f}".format(neuron.run([0,0])))
print("0 1 = {0:.10f}".format(neuron.run([0,1])))
print("1 0 = {0:.10f}".format(neuron.run([1,0])))
print("1 1 = {0:.10f}".format(neuron.run([1,1])))
